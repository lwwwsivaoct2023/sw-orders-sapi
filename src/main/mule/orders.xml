<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="deleteorderbyoyderid" doc:id="cb2b4b34-f0d2-4f5a-a5e2-b088e2c21a3e" >
		<db:delete doc:name="Delete orderitems" doc:id="5cb37cc9-82b6-4990-9169-379d26f1de3e" config-ref="Database_Config">
			<db:sql ><![CDATA[delete from order_items where order_id= :orderId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	orderId: vars.orderId
}]]]></db:input-parameters>
		</db:delete>
		<db:delete doc:name="Delete" doc:id="e2a11247-1940-4bfd-8c39-e7b9e2f4e182" config-ref="Database_Config">
			<db:sql ><![CDATA[delete from orders where order_id= :orderId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	orderId: vars.orderId
}]]]></db:input-parameters>
		</db:delete>
	</flow>
	<flow name="deleteOrderItemByOrderItemId" doc:id="948621bf-f91c-413a-8cae-e7cb928a9f0e" >
		<db:delete doc:name="Delete" doc:id="8fefc072-6dcc-4c5b-af5e-01da72ba3676" config-ref="Database_Config">
			<db:sql ><![CDATA[delete from order_items where order_item_id = :orderItemId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	orderItemId: vars.id
}]]]></db:input-parameters>
		</db:delete>
	</flow>
	<sub-flow name="mapJoinedOrders" doc:id="0b2a6e12-5743-4456-b16d-7091f1b46be2" >
		<ee:transform doc:name="Transform Message" doc:id="57a32cd6-9276-46dd-9b92-30f0263f8129">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var ordersGroupedById=payload groupBy ((item, index) -> item.order_id )
var ordersmappedWithorderItems = ordersGroupedById mapObject (V,K,I)-> {
	(K):{
		orderId: K,
		customerId: V[0].customer_id,
		restaurantId: V[0].restaurant_id,
		deliveryAddressId: V[0].delivery_address_id,
		orderTotalPrice: V[0].order_total_price,
		orderStatus: V[0].order_status,
		orderTime: V[0].order_time,
		(orderItems: ( V map (item)-> {
						
						orderItemId: item.order_item_id,
						orderId: item.order_id,
						menuId: item.menu_id,
						menuItemId: item.menu_item_id,
						restaurantId: item.restaurant_id,
						quantity: item.quantity,
						orderItemPrice: item.order_item_price
		             }
		             
		             )) if (V[0].order_item_id != null)
		
	}
}
---
ordersmappedWithorderItems pluck (V,K,I)-> V]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<flow name="getOrderItemByOrderItemIdandOrderId" doc:id="48b0369f-f73f-4b31-ae50-dd75e3685c86" >
		<db:select doc:name="Select" doc:id="34eab40d-d5f3-485c-bc95-375a8fbe24c4" config-ref="Database_Config">
			<db:sql ><![CDATA[select * from order_items where order_item_id= :orderItemId
 and order_id= :orderId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	orderItemId: vars.id as  Number,
	orderId: vars.orderId as Number
	
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="275fbfa6-247a-4ebb-8e2d-49d1a5c1ee0c" >
			<when expression="#[isEmpty(payload)]">
				<raise-error doc:name="Raise error" doc:id="df2408ba-6ee9-4e1a-9a94-00d9573d393a" type="APP:DOESNOT_EXIST" description="OrderItem Doesn't Exist"/>
			</when>
			<otherwise >
				<set-payload value="#[payload[0]]" doc:name="Set Payload" doc:id="9857aebd-42d2-496e-8e39-8ac7233d0c42" />
			</otherwise>
		</choice>
	</flow>
	<flow name="AddOrderItemToOrder" doc:id="4f40b0e4-8a31-49c4-bffb-a9fb2c100d6d" >
		<flow-ref doc:name="findOrderByOrderId" doc:id="c8e3962f-7aea-4d83-928f-584c093c08f1" name="findOrderByOrderId" target="order"/>
		<db:insert doc:name="Insert OrderItem" doc:id="8f8edb9e-17a8-4f60-b3f7-7e421f628081" config-ref="Database_Config" autoGenerateKeys="true" target="insertresult">
			<db:sql ><![CDATA[INSERT INTO `order_items`(`order_id`,`menu_item_id`,`quantity`,`order_item_price`,`menu_id`,`restaurant_id`)
VALUES(:orderId,:menuItemId,:quantity,:orderItemPrice,:menuId,:restaurantId);]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
orderId: vars.order.order_id as Number,
menuItemId: payload.menuItemId as Number,
quantity: payload.quantity as  Number,
orderItemPrice: payload.orderItemPrice as Number,
menuId: payload.menuId as Number,
restaurantId: payload.restaurantId as Number

}]]]></db:input-parameters>
			<db:auto-generated-keys-column-names >
				<db:auto-generated-keys-column-name value="order_item_id" />
			</db:auto-generated-keys-column-names>
		</db:insert>
	</flow>
	<flow name="AddOrder" doc:id="86814151-b0c6-4271-bf41-9f62eacb0442" >
		<ee:transform doc:name="Set inputOrder Var" doc:id="c0abda2d-c80b-4963-a591-570065bcea51" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="inputOrder" ><![CDATA[%dw 2.0
output application/dw
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:insert doc:name="Insert" doc:id="7a3f8102-f848-4767-8ad8-88c92a24a074" config-ref="Database_Config" autoGenerateKeys="true" target="insertresult">
			<db:sql ><![CDATA[INSERT INTO `orders`(`customer_id`,`restaurant_id`,`delivery_address_id`,`order_total_price`,`order_status`,`order_time`)
VALUES(:customerId,:restaurantId,:deliveryAddressId,:orderTotalPrice,:orderStatus,:orderTime)]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
customerId: vars.inputOrder.customerId,
restaurantId: vars.inputOrder.restaurantId,
deliveryAddressId: vars.inputOrder.deliveryAddressId,
orderTotalPrice: vars.inputOrder.orderTotalPrice,
orderStatus: vars.inputOrder.orderStatus,
orderTime: vars.inputOrder.orderTime

}]]]></db:input-parameters>
			<db:auto-generated-keys-column-names >
				<db:auto-generated-keys-column-name value="order_id" />
			</db:auto-generated-keys-column-names>
		</db:insert>
		<set-variable value="#[vars.insertresult.generatedKeys.GENERATED_KEY]" doc:name="Set Variable" doc:id="75abd521-e2b1-4631-b544-d727a26ad80f" variableName="orderId" />
		<choice doc:name="Choice" doc:id="f60c9424-cb3a-49ec-aeb3-cb8c8e8644af" >
			<when expression="#[vars.inputOrder.orderItems? and sizeOf(vars.inputOrder.orderItems)&gt;0]" >
				<foreach doc:name="For Each" doc:id="3205c174-b269-4252-8e16-43bc9ed1e1f6" collection="#[vars.inputOrder.orderItems]" >
					<flow-ref doc:name="AddOrderItemToOrder" doc:id="aaa3cb53-5d3c-498e-8438-d20e8783e81a" name="AddOrderItemToOrder" />
				</foreach>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="f662448e-2c74-4551-8475-5722460ae304" message="No OrderItems to Order...So, not inserting" />
			</otherwise>
		</choice>
		<ee:transform doc:name="Transform Message" doc:id="686fc735-2cda-4b4c-9060-16506aa63e77">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	orderId: vars.orderId
} ++  vars.inputOrder]]></ee:set-payload>
					</ee:message>
				</ee:transform>
	</flow>
	<flow name="getOrderItemsByOrderId" doc:id="811d3571-9f0e-4161-bcf2-cdd8ab31e33b" >
		<db:select doc:name="Select" doc:id="4a5192e1-05a9-48f8-b8bb-cbeedba27f7f" config-ref="Database_Config">
			<db:sql ><![CDATA[select * from order_items where order_id= :orderId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	orderId: vars.orderId as Number
}]]]></db:input-parameters>
		</db:select>
		<ee:transform doc:name="Transform Message" doc:id="fdf79bd6-2c7a-4989-bd8a-36013debca97" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload map (item)->{
  "menuId": item.menu_id,
  "menuItemId": item.menu_item_id,
  "orderItemId": item.order_item_id,
  "orderId": item.order_id,
  "orderItemPrice": item.order_item_price,
  "restaurantId": item.restaurant_id,
  "quantity": item.quantity
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="getOrderByOrderId" doc:id="078ef654-65d9-4891-a6d5-ee92daced268" >
		<flow-ref doc:name="findOrderByOrderId" doc:id="e53c24c7-66e3-41b6-84e7-eb3d879296c2" name="findOrderByOrderId" target="order"/>
		<flow-ref doc:name="getOrderItemsByOrderId" doc:id="c3dd0feb-f82e-4c1c-aa30-acde94079441" name="getOrderItemsByOrderId" target="orderItems"/>
		<ee:transform doc:name="Transform Message" doc:id="bbd8c92c-809d-4bfb-9032-813edfb3c175" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
      
{
  "orderId": vars.order.order_id,
  "customerId": vars.order.customer_id,
  "restaurantId": vars.order.restaurant_id,
  "deliveryAddressId": vars.order.delivery_address_id,
  "orderTotalPrice": vars.order.order_total_price,
  "orderStatus": vars.order.order_status,
  "orderTime": vars.order.order_time,
  "orderItems": vars.orderItems
}

    ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="findOrderByOrderId" doc:id="fa8e3abc-cfe1-4f62-aaa9-6cc1ede17de1" >
		<db:select doc:name="Select" doc:id="9ce308a3-a7c0-4033-8321-0f173ec53a43" config-ref="Database_Config">
			<db:sql ><![CDATA[select * from orders where order_id= :orderId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	orderId: vars.orderId as Number
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="b5bbb3a7-281f-4db6-85b6-ea1da54f25ba" >
			<when expression="#[isEmpty(payload)]" >
				<raise-error doc:name="Raise error" doc:id="190a1791-ae6a-4ed1-9964-386f8459be5d" type="APP:DOESNOT_EXIST" description="Order with id  is not found" />
			</when>
			<otherwise >
				<set-payload value="#[payload[0]]" doc:name="Set Order As Payload" doc:id="c05b8cbc-1e09-4638-b11b-4a6fbd058785" />
			</otherwise>
		</choice>
	</flow>
	<flow name="getallorders" doc:id="9cd329b5-1a18-4fc0-96f9-e2ed40726d69" >
		<db:select doc:name="Select" doc:id="e3098c11-3a7e-42c3-a572-35ed9c98aa95" config-ref="Database_Config">
			<db:sql ><![CDATA[


SELECT o.order_id,o.customer_id,o.restaurant_id,o.delivery_address_id,o.order_total_price,
o.order_status,o.order_time,oi.order_item_id,oi.menu_item_id,oi.menu_id,oi.quantity,oi.order_item_price
 FROM  orders o left join  order_items oi on o.order_id=oi.order_id;]]></db:sql>
		</db:select>
		<flow-ref doc:name="Flow Reference" doc:id="a3dce772-e85f-4ca7-92e2-2a95e7fe75ba" name="mapJoinedOrders" />
		<logger level="INFO" doc:name="Logger" doc:id="9cc977e5-f1a6-4be8-8dec-227a67546ede" />
	</flow>
	<flow name="getAllOrdersOfACustomer" doc:id="bc1196e7-ab5a-4a14-b4ee-8e0b30f3f999" >
		<db:select doc:name="Select" doc:id="692e8944-7b19-4bdf-9030-f819897f4ecd" config-ref="Database_Config">
			<db:sql ><![CDATA[SELECT o.order_id,o.customer_id,o.restaurant_id,o.delivery_address_id,o.order_total_price,
o.order_status,o.order_time,oi.order_item_id,oi.menu_item_id,oi.menu_id,oi.quantity,oi.order_item_price
 FROM  orders o left join  order_items oi on o.order_id=oi.order_id where o.customer_id= :customerId;]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId: vars.id as Number
}]]]></db:input-parameters>
		</db:select>
		<flow-ref doc:name="Flow Reference" doc:id="afa42f00-2d3f-44b1-b33c-9177f5f6d662" name="mapJoinedOrders"/>
	</flow>
</mule>
