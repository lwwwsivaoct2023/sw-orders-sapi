<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="DeleteOrderById" doc:id="fd3b8f1e-8ad5-40b1-b95e-171d8cccfb46" >
		<db:delete doc:name="Delete" doc:id="6744a1bd-51a6-4181-b753-17365c19db5c" config-ref="Database_Config">
			<db:sql ><![CDATA[DELETE FROM `order_items` WHERE order_id = :orderid]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	orderid: vars.orderId
}]]]></db:input-parameters>
		</db:delete>
		<db:delete doc:name="Delete" doc:id="90aec0f9-025d-448a-8f50-d9405c2ae542" config-ref="Database_Config">
			<db:sql ><![CDATA[DELETE FROM `orders` WHERE order_id = :orderid]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	orderid: vars.orderId
}]]]></db:input-parameters>
		</db:delete>
		<choice doc:name="Choice" doc:id="0eb6bf75-b181-484b-b0f7-d18e2aa152c1" >
			<when expression="#[payload == 0]">
				<raise-error doc:name="Raise error" doc:id="5e4aa25f-d1b6-448a-b90a-adbfcf642f29" type="APP: DOESNOTEXIST" description="There is no order with that pariticular Id"/>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="23b1b969-6ccb-4d79-a8ce-9151fd557094" message="Delete order"/>
			</otherwise>
		</choice>
	</flow>
	<flow name="AddOrder" doc:id="6ce72c58-21eb-4f2a-b374-c1fe6d2777e3" >
		<ee:transform doc:name="Transform Message" doc:id="b469de87-4707-43a2-bffe-fbb666ad663b" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="inputOrder" ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:insert doc:name="Insert" doc:id="7d3a098c-442f-454c-8912-f40912e875a4" config-ref="Database_Config" autoGenerateKeys="true" target="insertresult">
			<db:sql ><![CDATA[INSERT INTO `orders (`customer_id`,`restaurant_id`,`delivery_address_id`,`order_total_price`,`order_status`,`order_time`)
VALUES(:customer_id,:restaurant_id,:delivery_address_id ,:order_total_price,:order_status,:order_time);
]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customer_id: vars.inputOrder.customerId,
	restaurant_id: vars.inputOrder.restaurantId,
	delivery_address_id: vars.inputOrder.deliveryAddressId,
	order_total_price: vars.inputOrder.orderTotalPrice,
	order_status: vars.inputOrder.orderStatus,
	order_time: vars.inputOrder.orderTime
	
}]]]></db:input-parameters>
			<db:auto-generated-keys-column-names >
				<db:auto-generated-keys-column-name value="order_id" />
			</db:auto-generated-keys-column-names>
		
</db:insert>
		<ee:transform doc:name="StoreGeneredtedId variable" doc:id="049fe169-5bcd-426f-905f-ec710d8b63e9" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="orderid" ><![CDATA[%dw 2.0
output application/json
---
vars.insertresult.generatedKeys.GENERATED_KEY]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<foreach doc:name="For Each" doc:id="9697016b-1de9-4678-b526-48890d662d2c" collection="#[vars.inputOrder.OrderItems]">
			<db:insert doc:name="Insert" doc:id="5e74947f-1e59-4049-8154-caba1f31453f" config-ref="Database_Config">
				<db:sql ><![CDATA[INSERT INTO `order_items` (`order_item_id`,`order_id`,`menu_item_id`,`quantity`,`order_item_price`,`menu_id`,`restaurant_id`)
VALUES (:order_id,:menu_item_id,:quantity,:order_item_price , :menu_id ,:restaurant_id);]]></db:sql>
				<db:input-parameters ><![CDATA[#[{
	order_id: vars.orderid,
	menu_item_id: payload.menuItemId,
	quantity: payload.quantity,
	order_item_price: payload.menuItemId,
	restaurant_id: payload.restaurantId
	
	
	
}]]]></db:input-parameters>
			</db:insert>
		</foreach>
		<ee:transform doc:name="Transform Message" doc:id="e451fae3-fb9d-4e79-a1ce-b79008a86595">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	 orderId: vars.orderid 
} ++ vars.inputOrder]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="4b6a43d5-8d37-4d62-bc24-a70c64e6ba92" message="#[payload]"/>
	
</flow>
	<flow name="FindOrderById" doc:id="bee0ddaa-50ae-4431-9f6f-d8d1d935fde8" >
		<db:select doc:name="GetAllOrderById" doc:id="9abb4641-1256-4c2f-acaa-ba51aef1f38d" config-ref="Database_Config">
			<db:sql><![CDATA[select o.order_id, o.customer_id,o.restaurant_id,o.delivery_address_id,o.order_total_price,o.order_status,o.order_time,
oi.order_item_id,oi.menu_item_id,oi.quantity,oi.order_item_price,oi.menu_id
 from orders o left join order_items oi on o.order_id= oi.order_id = :orderid]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	orderid: vars.orderId
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="2c9ce36e-b956-4e18-ae4f-178198f535b1" >
			<when expression="#[isEmpty(payload)]">
				<raise-error doc:name="Raise error" doc:id="4bff4fe5-35f7-48d0-967f-fbd6ef76b3a7" type="APP: DOESNOTEXIST" description="There is no order with that pariticular Id"/>
			</when>
			<otherwise>
				<flow-ref doc:name="mapdbselectresponseOrder" doc:id="893b316a-90b4-4c5d-a1a2-f20346c88a3b" name="mapdbselectresponseOrder" />
			</otherwise>
		</choice>
	</flow>
	<sub-flow name="mapdbselectresponseOrder" doc:id="82f4d774-0251-4b57-867a-020bf679e4d2" >
		<ee:transform doc:name="Transform Message" doc:id="cba45d36-5937-4e5b-a561-740d26398f35">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var groupedOrders = payload groupBy (item) -> item.order_id
var ordersMap = groupedOrders mapObject (V,K,I) -> {
	(K) : {
		
  "orderId": V[0].order_id,
  "customerId": V[0].customer_id,
  "restaurantId": V[0].restaurant_id,
  "deliveryAddressId": V[0].delivery_address_id,
  "orderTotalPrice": V[0].order_total_price,
  "orderStatus": V[0].order_status,
  "orderTime": V[0].order_time,
  orderItems: V map (order)->{
  	 "orderItemId": order.order_item_id,
      "orderId": order.order_id,
      "menuId": order.menu_id,
      "menuItemId": order.menu_item_id,
      "restaurantId": order.restaurant_id,
      "quantity": order.quantity,
      "orderItemPrice": order.order_item_price
  }
  
}
	
}


---
ordersMap pluck (V,K,I) -> V
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<flow name="getallOrders" doc:id="a741069d-866f-46df-9c56-fb2aafb00c39" >
		<db:select doc:name="Select" doc:id="f6d1231e-920b-4def-9671-5e39c40d6c54" config-ref="Database_Config">
			<db:sql ><![CDATA[select o.order_id, o.customer_id,o.restaurant_id,o.delivery_address_id,o.order_total_price,o.order_status,o.order_time,
oi.order_item_id,oi.menu_item_id,oi.quantity,oi.order_item_price,oi.menu_id
 from orders o left join order_items oi on o.order_id= oi.order_id ]]></db:sql>
		</db:select>
		<flow-ref doc:name="mapdbselectresponseOrder" doc:id="479e6b19-aa63-47af-b60c-c720998edc92" name="mapdbselectresponseOrder"/>
	</flow>
	<flow name="getallcustomer" doc:id="a00021b3-942c-49eb-9303-e9a3f17617a4" >
		<db:select doc:id="4849788e-cd9a-4f78-91b4-fc686bb1b8c3" doc:name="getcustomer" config-ref="Database_Config">
			<db:sql ><![CDATA[select o.order_id, o.customer_id,o.restaurant_id,o.delivery_address_id,o.order_total_price,o.order_status,o.order_time,
oi.order_item_id,oi.menu_item_id,oi.quantity,oi.order_item_price,oi.menu_id
 from orders o left join order_items oi on o.order_id= oi.order_id where o.customer_id = :custid]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
custid: vars.id as Number

}]]]></db:input-parameters>
		</db:select>
		<flow-ref doc:name="mapdbselectresponseOrder" doc:id="be38a2f9-9cf1-492a-abbd-1aae190b0fda" name="mapdbselectresponseOrder" />
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="c898186b-6ca0-417d-9e9f-453fc742c593" >
				<ee:transform doc:name="Transform Message" doc:id="d47c190e-8ba3-4763-bc64-cd0634d54ce6" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"status": "500",

    "message": "There was some server side problem. Please try later"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
</mule>
